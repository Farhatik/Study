
        .att_syntax     noprefix // используем синтаксис AT&T для записи инструкций, но не будем писать % перед регистрами
        .text                    // важно, чтобы код программы размещался в read-only секции, обычно .text
        .global main             // важно, чтобы точка входа была видима извне данной единицы компиляции
main:
        call    readi32         // считываем int32_t и помещаем результат в регистр eax процессора
        mov     eax, A          // сохраняем eax в память по адресу A (то есть в глобальную переменную A)

        call    readi32         // аналогично считываем int32_t и помещаем в глобальную переменную B
        mov     eax, B

        mov     A, eax          // загружаем значение из глобальной A переменной в регистр eax
        mov     B, ecx          // аналогично, ecx = B
        add     ecx, eax        // сложение: eax += ecx

        call    writei32        // выводим int32_t, находящееся в регистре eax на stdout
        call    nl              // выводим \n

        xor     eax, eax        // обнуляем eax, в котором должно находится возвращаемое значение
        ret                     // завершаем main, значение в eax будет кодом завершения программы
        .data
A:      .int    0               // int32_t A;
B:      .int    0               // int32_t B;